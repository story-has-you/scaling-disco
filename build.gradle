buildscript {
    repositories {
        maven { url "https://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "https://maven.aliyun.com/nexus/content/repositories/gradle-plugin" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    /*定义依赖的springboot版本*/
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:${springIOVersion}"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

group = "com.re0"
version = "0.0.1-SNAPSHOT"
ext {
    lib = [
        "hutool-all"  : "cn.hutool:hutool-all:5.8.0.M2",
        "guava"       : "com.google.guava:guava:31.1-jre",
        "mybatis-plus": "com.baomidou:mybatis-plus-boot-starter:3.5.1",
        "knife4j"     : "com.github.xiaoymin:knife4j-spring-boot-starter:3.0.3",
        "jjwt-api"    : "io.jsonwebtoken:jjwt-api:0.11.2",
        "jjwt-impl"   : "io.jsonwebtoken:jjwt-impl:0.11.2",
        "jjwt-jackson": "io.jsonwebtoken:jjwt-jackson:0.11.2",
    ]
}

subprojects {
    apply plugin: "io.spring.dependency-management"
    apply plugin: "java"
    apply plugin: "idea"
    apply plugin: "java-library"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8


    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
        maven {
            url "https://maven.aliyun.com/repository/public"
        }
    }

    // 所有的项目共用依赖
    dependencies {
        implementation "org.springframework.boot:spring-boot-starter"
        testImplementation "org.springframework.boot:spring-boot-starter-test"
        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }
        // 这里一定得要。在多模块下，不然编译失败，因为不会把信赖模块给打包。
        jar {
            enabled = true
        }
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    test {
        useJUnitPlatform()
    }

    compileJava {
        options.compilerArgs << "-parameters"
        options.encoding = "UTF-8"
        // 增量编译
        options.incremental = true
    }
}
